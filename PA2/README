Grupo: Rossana Souza, Lucas Milard, Natan Alexandre, Luam Gonçalves


====================================================
README file for Programming Assignment 2 (C++ edition)
=====================================================

Your directory should now contain the following files:

 Makefile        -> [course dir]/src/PA2/Makefile
 README
 cool.flex
 test.cl
 lextest.cc      -> [course dir]/src/PA2/lextest.cc
 mycoolc         -> [course dir]/src/PA2/mycoolc
 stringtab.cc    -> [course dir]/src/PA2/stringtab.cc
 utilities.cc    -> [course dir]/src/PA2/utilities.cc
 handle_flags.cc -> [course dir]/src/PA2/handle_flags.cc
 *.d             dependency files
 *.*             other generated files

The include (.h) files for this assignment can be found in 
[course dir]/include/PA2

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code. Just edit this file.

	cool.flex is a skeleton file for the specification of the
	lexical analyzer. You should complete it with your regular
	expressions, patterns and actions. Information on how to do this
	is in the flex manual, which is part of your reader.

	test.cl is a COOL program that you can test the lexical
	analyzer on. It contains some errors, so it won't compile with
	coolc. However, test.cl does not exercise all lexical
	constructs of COOL and part of your assignment is to rewrite
	test.cl with a complete set of tests for your lexical analyzer.

	cool-parse.h contains definitions that are used by almost all parts
	of the compiler. DO NOT MODIFY.

	stringtab.{cc|h} and stringtab_functions.h contains functions
        to manipulate the string tables.  DO NOT MODIFY.

	utilities.{cc|h} contains functions used by the main() part of
	the lextest program. You may want to use the strdup() function
	defined in here. Remember that you should not print anything
	from inside cool.flex! DO NOT MODIFY.

	lextest.cc contains the main function which will call your
	lexer and print out the tokens that it returns.  DO NOT MODIFY.

	mycoolc is a shell script that glues together the phases of the
	compiler using Unix pipes instead of statically linking code.  
	While inefficient, this architecture makes it easy to mix and match
	the components you write with those of the course compiler.
	DO NOT MODIFY.	

        cool-lexer.cc is the scanner generated by flex from cool.flex.
        DO NOT MODIFY IT, as your changes will be overritten the next
        time you run flex.

 	The *.d files are automatically generated Makefiles that capture
 	dependencies between source and header files in this directory.
 	These files are updated automatically by Makefile; see the gmake
 	documentation for a detailed explanation.

Instructions
------------

	To compile your lextest program type:

	% gmake lexer

	Run your lexer by putting your test input in a file 'foo.cl' and
	run the lextest program:

	% ./lexer foo.cl

	To run your lexer on the file test.cl type:

	% gmake dotest

	If you think your lexical analyzer is correct and behaves like
	the one we wrote, you can actually try 'mycoolc' and see whether
	it runs and produces correct code for any examples.
	If your lexical analyzer behaves in an
	unexpected manner, you may get errors anywhere, i.e. during
	parsing, during semantic analysis, during code generation or
	only when you run the produced code on spim. So beware.

	To turnin your work type:

	% gmake submit-clean

	And run the "submit" program following the instructions on the
	course web page.
	
	Running "submit" will collect the files cool.flex, test.cl,
	README, and test.output. Don't forget to edit the README file to
	include your write-up, and to write your own test cases in
	test.cl.

 	You may turn in the assignment as many times as you like.
	However, only the last version will be retained for
	grading.

	If you change architectures you must issue

	% gmake clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA2
----------------

====================================================================
Trabalho apresentado à disciplina de compiladores do Curso de Ciência da Computação da PUC - Minas
Alunos: Rossana Souza, Lucas Milard, Natan Alexandre, Luam Gonçalves
====================================================================
*** Comentários:**

1. Os comentários foram separados em comentários de linhas múltiplas e comentários de linha única. Sendo que os identificadores de início e fio do primeiro tipo são "(" e ")" e o comentário de linha única com "--".
2. Se uma quebra de linha ocorrer dentro de um comentário múltiplo o contador de linhas também irá somá-la.
3. Caso seja encontrado algum EOF no comentário um erro é retornado. 

*** Strings:**

1. Strings são identificadas com o caracter " (aspas duplas).
2. Caso seja encontrado algum EOF no meio da string um erro é retornado.
3. Caso a string seja muito grande um erro tamém é disparado.
4. Casos de \" aninhados também foram tratados, como o exemplo do arquivo  tests/lam.cl.
line 260 out_string("    { out_string(\"Applying closure "); 

*** Palavras chave:**

As palavras chaves ou palavras reservadas são case insensitive na linguagem cool, por isso foram previstas todas as possíveis formas de escrever essas palavras com letras maiúsculas e minúsculas.

*** Testes:**

1. Os testes foram realizados de forma isolada, para cada caso de erro, e também de forma combinada, combinando todos os erros possíveis. Também foram realizados testes nos quais nenhum erro foi encontado e o processamento foi concluído com sucesso. 
2. Testes com os código de exemplo também foram feitos, utilizando todo o compilador pelo script de mycoolc, resultando em um arquivo .s
3. Testes com arquivo que possuem dependência entre si também foram realizados como o caso do atoi_test.cl que necessita do arquivo atoi.cl. Nesses testes a compilação funcionou como o esperado utilizando o script mycoolc.

./mycoolc tests/atoi_test.cl tests/atoi.cl
/var/tmp/cool/bin/spim -file tests/atoi_test.s

4. Todos os arquivos de teste da pasta "tests" foram testados e compilados corretamente. 

*** TYPEID e OBJECTID:**

Os tipos de variáveis e objetos dentro da linguagem cool não possuem identificadores exclusivos, dessa forma são tratados como typeid e objectid. Os typeid's são os tipos que começam com letra maiúscula, por exemplo "String" e "Int". Já os tipos que inicial com letra minúscula são considerados objectid's. 

*** Símbolos e operadores:**

1. A lista de símbolos aceita os seguintes caracteres: ("+"|"-"|"*"|"/"|"~"|"<"|"="|"("|")"|"{"|"}"|";"|":"|"."|","|"@"). Quando o programa encontra qualquer um desses caracteres ele retorna ele mesmo. 

*** Inteiros: ***

1. Os inteiros são aceitos no range de 0-9 e são concatenados caso sejam maiores que um dígito. Não há limite para o tamanho do inteiro. 

*** Contador de linha: ***

1. A cada nova linha o contador "curr_lineno" é incrementado. Caso algum erro ocorra ele será informado na exata linha onde o erro foi encontrado. 

*** Erros:**

1. Os erros são armazenados na variável "error_msg". Caso algum erro ocorra o programa continuará sendo processado até o final e os erros serão exibidos na exata linha em que ocorreram devido ao contador de linhas "curr_lineno".